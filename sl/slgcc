#!/bin/bash
export SELF="$0"

# this makes 7x speedup in case 'grep' was compiled with multi-byte support
export LC_ALL=C

die() {
    printf "%s: %s\n" "$SELF" "$*"
    exit 1
}

tty >/dev/null || die "standard input not a terminal"

if test -z "$1" || test ! -e "$1"; then
    echo Usage: $0 foo.c
    exit 1
fi

self="`readlink -f "$0"`"
topdir="`dirname "$self"`/.."

# basic setup
SL_BUILD="$topdir/sl_build"
SL_PLUG="$SL_BUILD/libsl.so"
GCC="$topdir/gcc-install/bin/gcc"

# initial checks
test -x "$GCC" || exit 1

# attempt to make
test -x "$SL_PLUG" \
    || make -s $MAKEOPTS -C "$topdir/sl" \
    || exit 1

# use verbose level 0 by default
test -z "$SL_VERBOSE" && SL_VERBOSE=0

# use chromium as default SVG_VIEWER
test -z "$SVG_VIEWER" && SVG_VIEWER=chromium

if test x1 = "x$SL_PLOT"; then
    # wipe all .dot and .svg
    rm -f *.dot *.svg
fi

pidfile="$(mktemp)"
test -w "$pidfile" || die "mktemp failed"
export pidfile
trap "rm -f '$pidfile'" EXIT

# run the gcc
run_gcc() {
    printf "Trying to compile \033[1;37m%s\033[0m ... " "$*" >/dev/tty
    tmp="$(mktemp)"
    test -w "$tmp" || die "mktemp failed"
    trap "rm -f '$tmp'" RETURN

    if "$GCC" -o /dev/null -O0 -m32 -DPREDATOR                      \
        -I../cl -I../cl/gcc -I../include -I../include/gcc -c "$@"   \
        > "$tmp" 2>&1
    then
        printf "\033[1;32mOK\033[0m\n" >/dev/tty
        cat "$tmp" >/dev/tty
        printf "Running \033[1;34mPredator\033[0m ...\n" >/dev/tty
    else
        printf "\033[1;31mFAILED\033[0m\n\n" >/dev/tty
        cat "$tmp"
        return 1
    fi

    "$GCC" -o /dev/null -O0 -m32 -DPREDATOR                         \
        -I../cl -I../cl/gcc -I../include -I../include/gcc           \
        -fplugin="$SL_PLUG" -fplugin-arg-libsl-pid-file="$pidfile"  \
        -fplugin-arg-libsl-verbose="$SL_VERBOSE" $SL_OPTS -c "$@"   \
        2>&1 | stdbuf --output=L grep -E                            \
        ' \[-fplugin-libsl\]$|CL_BREAK_IF|INT3|SIGTRAP|internal compiler error'
}

forward_signal() {
    cc_pid="$(<$pidfile)"
    test 0 -le "$cc_pid" || die "invalid pidfile"
    kill "-$1" "$cc_pid"
    wait
}

# colorize the output
run_gcc "$@" | stdbuf --output=L sed -re 's| \[-fplugin-libsl\]$||'            \
        -e 's|(^.*) \[internal location\]$|\o033[1;30m\1\o033[0m|'             \
        -e 's|(: error:) (.*)$|\1 \o033[1;31m\2\o033[0m|'                      \
        -e 's|(: warning:) (.*)$|\1 \o033[1;33m\2\o033[0m|'                    \
        -e 's|(: note:) (.*)$|\1 \o033[1;32m\2\o033[0m|'                       \
        -e 's|(current memory usage: *) ([0-9.]+ MB)|\1 \o033[1;34m\2\o033[0m|'\
        -e 's|(!!! executing insn #[0-9]+ ...) (.*)$|\1 \o033[1;32m\2\o033[0m|'\
        -e 's|(variable[:]? #[0-9]+:)([a-zA-Z0-9_.]+)|\1\o033[1;32m\2\o033[0m|'\
        -e 's|(per target) (L[0-9]+)|\1 \o033[1;32m\2\o033[0m|'                \
        -e 's|(initial size of state was) ([0-9]+)|\1 \o033[1;37m\2\o033[0m|'  \
        -e 's|(#[0-9]+)|\o033[1;37m\1\o033[0m|'                                \
        -e 's|(block) (L[0-9]+) (in progress)|\1 \o033[1;33m\2\o033[1;32m \3|' \
        -e 's|(... while executing) (.*\(\))|\1 \o033[1;33m\2\o033[0m|'        \
        -e 's|took ([0-9.]+ s)|took \o033[1;34m\1\o033[0m|'                    \
        -e 's|(internal compiler error:) (.*)$|\1 \o033[1;31m\2\o033[0m|'      \
        -e 's/(CL_BREAK_IF|INT3|SIGTRAP)/\o033[1;31m\1\o033[0m/'               \
        -e 's/(: debug: *) ([<>]J[<>]|AAA)/\1 \o033[1;31m\2\o033[0m/'          \
        -e 's/(: debug: SymHeap::)(objSetConcrete)/\1\o033[1;33m\2\o033[0m/'   \
        -e 's/(: debug:) \(x\) (.*)$/\1 \o033[1;33m(x)\o033[0m \2/'            \
        -e 's/(: debug:) (spliceOutListSegment)/\1 \o033[1;34m\2\o033[0m/'     \
        -e 's/(: debug:) (<<<|>>>)/\1 \o033[1;34m\2\o033[0m/'                  \
        -e 's/(: debug:) ___ (entering|we are)/\1 \o033[1;32m___\o033[0m \2/'  \
        &

# redirect terminating signals to our plug-in
trap "forward_signal SIGTERM" SIGTERM
trap "forward_signal SIGINT"  SIGINT
wait

if test x1 = "x$SL_PLOT"; then
    # visualize graphs
    printf "graph visualization in progress ... "
    make $MAKEOPTS -s -f "$topdir/sl/data/Makefile" TIMEOUT="timeout 2" \
        || exit $?
    printf "done\n"
    "$SVG_VIEWER" *.svg
fi
